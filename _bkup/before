	mns = function(){};
	var title = function(){};
	// var basemaps = {};
	var additional_attrib = ''; // attribute

// basemap stuffs start
	mns = L.map('mns-map', {
		maxBounds: L.latLngBounds([22, 114], [3, 129])
	}).setView([12.121, 121.21], 6);

	// tile sources

	// OSM basemap
	// var basemap_0 = L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { 
	// 			attribution: additional_attrib + '&copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>',
	// 			maxZoom: 8
	// });
	// basemap_0.addTo(mns);

	// MapBox basemap
	var basemap_0 = L.tileLayer('https://{s}.tiles.mapbox.com/v4/technick.lhbeglg8/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoidGVjaG5pY2siLCJhIjoiNDMxclhDUSJ9.35_fzvEnBhNWp6Ldf4qrhg', { 
				attribution: additional_attrib + "<a href='https://www.mapbox.com/about/maps/' target='_blank'>&copy; Mapbox | &copy; OpenStreetMap</a> | <a class='mapbox-improve-map' href='https://www.mapbox.com/map-feedback/' target='_blank'>Improve this map</a>",
				maxZoom: 8
	});
	basemap_0.addTo(mns);

	// TODO: Add basemap for offline


	title = new L.control();
	title.onAdd = function (map) {
		this._div = L.DomUtil.create('div', 'info'); // create a div with a class "info"
		this.update();
		return this._div;
	};

	title.update = function () {
		this._div.innerHTML = '<h5>Mapa ni SARAI</h5>';
	};

	title.addTo(mns);

	// map scale on bottom left of screen
	L.control.scale({
		options: {
			position: 'bottomleft',
			maxWidth: 100,
			metric: true,
			imperial: false,
			updateWhenIdle: 
			false
		}
	}).addTo(mns);

	// overlays stuffs start
	var d = 0;
	var idata = [];
	var overlays = {};
	var feature_group, olControl;
	var layerOrder = []; // ??? this was from the original file, deleting and re-adding feature layers

	// returns random 1-1000 int, to be removed later
	var randomT = function () {
		return Math.floor((Math.random() * 1000) + 1);
	};

	// gets color for choropleth map with data intensity
	var getColor = function () {
		// TODO: remove this, replace with legit data variable
		d = randomT(); // stores random number from randomT()

		return d > 1000 ? ['#800026', d] :
	           d > 750  ? ['#BD0026', d] :
	           d > 500  ? ['#E31A1C', d] :
	           d > 250  ? ['#FC4E2A', d] :
	           d > 100  ? ['#FD8D3C', d] :
	           d > 50   ? ['#FEB24C', d] :
	           d > 10   ? ['#FED976', d] :
	           ['#FFEDA0', d];
	}

	// supposed land use layer, but actually just provinces boundaries
	luLayer = new L.geoJson(luProvinces, {
		onEachFeature: function (feature, layer) {
			idata = getColor();
			popupContent = feature.properties.html_exp;
			layer.bindPopup(popupContent + "Total Agricultural Land Use: <strong>" + idata[1] + " ha.</strong>");
		},
		style: function (feature) {
			return {
				color: 'white',
				fillColor: idata[0],
				weight: 1.5,
				opacity: 1,
				dashArray: '3',
				fillOpacity: 0.7
			};
		}
	});
	// add comment sign to hide this layer on the map in the initial view.
	// luLayer.addTo(mns);

	// suitLayer = new L.geoJson();

	feature_group = new L.featureGroup([]);
	// feature_group.addLayer(luLayer);

	// overlay switcher
	// overlays = {
	// 	"Land Use": luLayer
	// 	// "Luzon Suitability": suitLayer
	// };

	// olControl = new L.control.layers(undefined, overlays, {
	// 	collapsed: false
	// });
	// olControl.addTo(mns);

	// data overlay checkbox listener
	$(":checkbox.filled-in").change( // if a checkbox with class .filled-in has changed
		function() {
			if ($(this).is(':checked')) { // if it was checked
				luLayer.addTo(mns);
				
			} else {
				mns.removeLayer(luLayer);
			}

			// TODO: create logic to get the corresponding checkbox's ID and call that layer
		}
	);